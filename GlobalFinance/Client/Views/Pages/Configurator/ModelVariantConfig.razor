@page "/cars/{CarId:int}/modelvariant"
@using GlobalFinance.Client.ServicesInterfaces
@using GlobalFinance.Client.Views.Components.Configurator
@using GlobalFinance.Shared.Models
@inject ICarService CarService
@inject IConfiguratorService ConfiguratorService
@inject NavigationManager NavigationManager

<h3>Configurator</h3>

<ConfiguratorDisplayComponent _car="@_car" _carImgSrc="@_imgSrc" _action="Choose Model Variant" _options="@_options" @bind-OptionId="_modelVariantId" @bind-ConfigOptions="_configOptions" @bind-OptionPrice="_optionsPrice" OptionIdSet="GivenModelVariantOption" _forwardRoute="@_forwardRoute" _returnRoute="@_returnRoute"></ConfiguratorDisplayComponent>


@code {
    [Parameter, EditorRequired]
    public int CarId { get; set; }

    private CarModel? _car;

    private string _imgSrc;

    private List<ModelVariantModel> _modelVariants;

    private List<ConfiguratorOptionModel> _options;

    private int _modelVariantId;
    private int _optionsPrice;
    private string _forwardRoute;
    private string _returnRoute;

    private Stack<ConfiguratorOptionModel> _configOptions;

    private ConfigurationModel Configuration;

    protected override async Task OnInitializedAsync()
    {

        await CarService.GetModels(CarId);
        var carResult = await CarService.GetSingleCar(CarId);
        if (carResult is not null)
        {
            var prevConfig = ConfiguratorService.Configuration;
            if (prevConfig == new ConfigurationModel())
            {
                ConfiguratorService.Configuration = new ConfigurationModel()
                {
                    ConfigurationId = 0,
                    CarId = carResult.CarId,
                    ModelVariantId = 0,
                    PaintId = 0,
                    Options = new Stack<ConfiguratorOptionModel>(),
                    Price = carResult.CarOutrightStartingPrice
                };

                Configuration = prevConfig;
            } else
            {
                Configuration = ConfiguratorService.Configuration;
            }

            _car = carResult;
            _imgSrc = $"Images/Car-images/{carResult.CarId}.jpg";
            _options = ConfiguratorService.ConvertModelVariantToOption(CarService.ModelVariants);
            _configOptions = Configuration.Options ?? new Stack<ConfiguratorOptionModel>();
            _modelVariantId = Configuration.ModelVariantId ?? 0;
            if(Configuration.Options is not null)
            {
                Configuration.Options.ToList().ForEach(x => _optionsPrice += x.OptionPriceIncrease);
            }else
            {
                _optionsPrice = 0;
            }

        }
        _forwardRoute = $"/cars/{CarId}/paintcolour";
        _returnRoute = "/cars";
    }

    private void GivenModelVariantOption()
    {
        ConfiguratorService.Configuration.ModelVariantId = _modelVariantId;
        ConfiguratorService.Configuration.Options = _configOptions;
    }


    }
