
@inject IInventoryService InventoryService
@inject ICarService CarService

<div class="heading">
    <h3>Edit Inventory</h3>
</div>

@if (Inventory.Customisation != null)
    {
<div class="inventory-edit-form">
    <EditForm Model="Inventory" OnValidSubmit="HandleInventoryUpdate">
        <DataAnnotationsValidator />
        <div class="inventory-form-inner">
            <div class="inventory-form-section" id="model-variant">
                <InputSelect @bind-Value="Inventory.Customisation.ModelVariantId">
                    @foreach (ModelVariantModel model in modelVariants)
                    {
                        <option value="@model.ModelVariantId">@model.Name</option>
                    }
                </InputSelect>
            </div>
            <div class="inventory-form-section" id="mileage">
                <InputNumber @bind-Value="Inventory.InventoryMileage"></InputNumber>
            </div>
            <div class="inventory-form-section" id="price">
                <InputNumber @bind-Value="Inventory.InventoryPrice"></InputNumber>
            </div>
            <div class="inventory-form-section" id="colour">
                <InputSelect @bind-Value="Inventory.Customisation.PaintId">
                    @foreach (PaintModel paint in paints)
                    {
                        <option value="@paint.PaintId">@paint.Name</option>
                    }
                </InputSelect>
            </div>
            <div class="inventory-form-section" id="submit">
                <button type="submit">Update</button>
            </div>
        </div>

    </EditForm>
</div>
    }



@code {
        [Parameter]
        public InventoryModel Inventory { get; set; }

        private List<ModelVariantModel> modelVariants = new List<ModelVariantModel>();
        private List<PaintModel> paints = new List<PaintModel>();

        protected override async Task OnParametersSetAsync()
        {
            if (Inventory.Customisation != null)
            {
                await CarService.GetModels(Inventory.Customisation.CarId);
                await CarService.GetPaints(Inventory.Customisation.CarId);

                modelVariants = CarService.ModelVariants;
                paints = CarService.Paints;

                Console.WriteLine(Inventory.InventoryPrice);
            }
        }

    private async void HandleInventoryUpdate() {

        await InventoryService.UpdateInventoryItem(Inventory);
    }
    }

